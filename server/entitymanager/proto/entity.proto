// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package entity;
import "google/protobuf/struct.proto";
//import "bootz/proto/bootz.proto";

import "github.com/openconfig/gnsi/authz/authz.proto";
import "github.com/openconfig/gnsi/certz/certz.proto";
import "github.com/openconfig/gnsi/credentialz/credentialz.proto";
import "github.com/openconfig/gnsi/pathz/pathz.proto";
import "proto/bootz.proto";



option go_package = "github.com/openconfig/bootz/server/entitymanager/proto/entity";

message Options {
  // global gnsi config for all entities. Device level config will take precedence if is defined
  gNSIConfig gnsi_global_config = 1;

  // server trust bundle that is used by clients to authenticate bootz server 
  string server_trust_bundle_file = 2;

}

// A binding configuration.
message Entities {
  // configs to be applied globally
  Options options = 1;

  // chassis to be servered with the inventory manager
  repeated Chassis chassis = 2;
}

// Config for resetting the device before the test run.
message Config {
  // boot config
  bootz.BootConfig boot_config =1 ; 

  // dhcp config
  DHCPConfig dhcp_config =2 ; 

  // gnsi config
  gNSIConfig gnsi_config =3 ; 

}

message gNSIConfig {
  // path to authz upload file
  string authz_upload_file = 1;

  // authz upload request
  gnsi.authz.v1.UploadRequest authz_upload = 2;

  //pathz upload file
  string pathz_upload_file = 3;

  //pathz upload 
  gnsi.pathz.v1.UploadRequest pathz_upload = 4;

  // certificate upload request
  gnsi.certz.v1.UploadRequest certz_upload = 5;

  // path to certz certificate file
  string certz_upload_file = 6;

  // path to credz policy file
  string credentials_file = 7;

  //  gnsi credentail config
  bootz.Credentials credentials = 8;

}
 message  DHCPConfig {
    // mac address of the management interface that will be used to get dhcp address
    repeated string hardware_ethernet = 1;

    // address to be assigned by dhcp server to chassis
    repeated string fixed_address = 2;
}

enum BootMode{
      UnSecure = 0;
      Secure = 2;
   }

// A Chassis entity.
message Chassis {

  // Chassis Serial Number
  string serial_number = 1;

  // Chassis name
  string name = 2;

  // Chassis Part Number
  string part_number = 3;

  // Chassis Manufacturer
  string manufacturer = 4;

  // Chassis OwnerShip Voucher
  string ownership_voucher = 5;

  // Password for bootloader password
  string bootloader_password_hash = 6;

  // Boot mode defines the boot mode that can be secure/UnSecure 
  BootMode boot_mode =7;

  // Software image to be loaded on the chassis
  bootz.SoftwareImage software_image = 8; 

  // control cards. 
  repeated bootz.ControlCard controller_cards = 9;

  // config to be loaded on the chassis
  Config config = 10; 

}


