// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package entity;
import "google/protobuf/struct.proto";
//import "bootz/proto/bootz.proto";



option go_package = "github.com/openconfig/bootz/server/entitymanager/proto/entity";


// A binding configuration.
message Entities {
  repeated Chassis chassis = 1;
}

// Config for resetting the device before the test run.
message Config {
  // boot config
  BootConfig boot_config =1 ; 

  // dhcp config
  DHCPConfig dhcp_config =2 ; 

  // gnsi config
  gNSIConfig gnsi_config =3 ; 

}

message gNSIConfig {
  // path to authz policy file
  string authz_policy_file = 1;

  // path to certz policy file
  string certz_policy_file = 2;

  // path to credz policy file
  string credz_policy_file = 3;

  // path to pathz policy file
  string pathz_policy_file = 4;

  // path to CA certificate bundle file 
  string ca_trust_bundle_file = 5;

  // TODO: add remained configs

}
 
// Details of the control card, including serial-number and the location
// of the card on the chassis.
message ControlCard {
  string part_number = 1;
  string serial_number = 2;
  int32 slot = 3;
}

message SoftwareImage {
  string name = 1;
  string version = 2;
  // An HTTP location from where the OS file can be downloaded.
  string url = 3;
  // Hash of the OS image. The device must verify that the hash of the
  // downloaded OS image matches this.
  string os_image_hash = 4;
  string hash_algorithm = 5;
}

message  DHCPConfig {
    // mac address of the management interface that will be used to get dhcp address
    repeated string hardware_ethernet = 1;

    // address to be assigned by dhcp server to chassis
    repeated string fixed_address = 2;
}

enum BootModes{
      UnSecure = 0;
      Secure = 1;
   }

// A Chassis entity.
message Chassis {

  // Chassis Serial Number
  string serial_number = 1;

  // Chassis name
  string name = 2;

  // Chassis Part Number
  string part_number = 3;

  // Chassis Manufacturer
  string manufacturer = 4;

  // Chassis OwnerShip Voucher
  string ownership_voucher = 5;

  // Password for bootloader password
  string bootloader_password_hash = 6;

  // Boot mode defines the boot mode that can be secure/UnSecure 
  BootModes boot_mode =7;

  // Software image to be loaded on the chassis
  SoftwareImage software_image = 8; 

  // control cards

  // config to be loaded on the chassis
  Config config = 9; 

}

message BootConfig {
  // Proprietary key-value parameters that are required as part of boot
  // configuration (e.g., feature flags, or vendor-specific hardware knobs).
  google.protobuf.Struct metadata = 1;

  // Native format vendor configuration file
  bytes vendor_config_file = 2;

  // JSON rendered OC configuration file
  bytes oc_config_file = 3;

  // Bootloader key-value parameters that are required as part of boot
  // configuration.
  google.protobuf.Struct bootloader_config = 4;
}

